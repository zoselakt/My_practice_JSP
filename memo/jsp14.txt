[JSP 방식]  a.jsp --> b.jsp --> c.jsp
각 페이지마다 필요시 자바 코드가 작성되며, DB와 연결하는 코드도 jsp파일 안에서 모두 작성된다.
분리되어 있지 않기 때문에 규모가 작은 프로젝트에 어울리는 방식
코드가 확장될수록 가독성이 떨어지고 분업과 유지보수가 좋지 않다.

소프트웨어 디자인 설계 패턴

MVC
Model: 데이터 조회 결과값을 저장할 객체( VO, DTO )
View: 화면구현(html, jsp, css, js...)
Controller: 데이터베이스에 접근할 수 있는코드가 담긴 객체(DAO:data access object_

[model1 방식] 
자바코드랑 jsp코드를 분리 
b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다. 선언은 분리되어 java페이지에 구현되기 때문에 jsp내 java코드 양이 줄어들지만
결국 사용은 jsp페이지에서 하기 때문에 controller와 view가 섞이게 된다.
페이지가 확장될수록 유지보수가 상대적으로 좋지 않지만 설계는 쉽다

a. jsp → b.jsp → c.jsp
	↕
	DAO.java

[model2 방식]
a.jsp에서 다음 페이지를 이동하기 전 필요한 비지니스 로직을 완벽히 분리하여 관리한다.
사용자가 정의한 확장자(.me, .bo, ...)를 페이지 이동 주소(URL)에 작성하게 되면 web.xml에 가서 경로를 찾는다.
web.xml에 파일 경로를 하나씩 모두 만들게 되면 코드가 길어지기 때문에 *.me가 붙은 모든 요청을 하나의 경로로
보내주도록 설정한다. 이 경로를 알맞는 Front-Controller.java 경로로 설정한다.
Front-Controller에서는 들어온 요청에서 .me앞의 요청명으로 어떤 로직을 수행할지를 판단하도록 분기처리를 한다.
비지니스 로직을 Front-Controller에서 작업하게 되면 마찬가지로 코드가 길어지고 유지보수 및 재사용이 어렵기 때문에
요청별 Action(또는Controller) 을 만들어서 실행할 메소드( execute() )를 구현한다.
따라서 execute를 모든 Action에 구현해야 하기 때문에 Action 인터페이스를 선언하여 추상메소드 형태로
execute를 선언해 놓고 각 Action에게 지정하여 구현하도록 한다. 
execute내부에서의 작업들은 DAO에 메소드를 구현해 놓고 사용한다.
내부 작업이 모두 완료되면 페이지를 이동할 것인지, 어떤 방식으로 할 것인지, 어디로 이동할 것인지를 결정해서 리턴해야한다.
이에 관련된 필드를 ActionForward에 만들어 놓은 후 execute()의 리턴타입을 ActionForward로 지정하여
Action의 execute를 사용하는 Front-Controller에 리턴해준다.
Front-Controller에서는 ActionForward객체에 담긴 결과에 맞게 처리한 후 view로 이동하게 된다.

- Redirect(request 객체 초기화)
web Browser --> 결제 페이지 --> 새로고침(뒤로가기) --> 결제페이지
클라이언트가 요청했을떄 이전의 값이 남아있지 않도록 하기 위해 사용한다.
회원가입, 글작성, 결제 등

- forward(request 객체유지)
web Browser --> 검색페이지 -->검색결과페이지
클라이언트가 request객체를 통해 값을 전달해야 할 때 혹은 단순 조회를 요청할 때 사용한다.
redirect보다 성능이 좋다. 목록, 검색 등 
*forward와redirect중 무엇을 쓸지 모를경우 ! : forward를 써라!

						1. forward 2.redirect
a. jsp → web.xml → Front-Controller.java -----------------------> c.jsp
                                 ↓     ↑
                              Controller.java
                                 ↓     ↑
                                 DAO.java
                                 ↓     ↑
                                    DB